11100011101000000000000000010100 //MOV R0 ,#20 //R0 = 20
11100011101000000001101000000001 //MOV R1 ,#4096 //R1 = 4096
11100011101000000010000100000011 //MOV R2 ,#0xC0000000 //R2 = -1073741824
11100000100100100011000000000010 //ADDS R3 ,R2,R2 //R3 = -2147483648
11100000101000000100000000000000 //ADC R4 ,R0,R0 //R4 = 41
11100000010001000101000100000100 //SUB R5 ,R4,R4,LSL #2 //R5 = -123
11100000110000000110000010100000 //SBC R6 ,R0,R0,LSR #1 //R6 = 9
11100001100001010111000101000010 //ORR R7 ,R5,R2,ASR #2 //R7 = -123
11100000000001111000000000000011 //AND R8 ,R7,R3 //R8 = -2147483648
11100001111000001001000000000110 //MVN R9 ,R6 //R9 = 10
11100000001001001010000000000101 //EOR R10,R4,R5 //R10 = -84
11100001010110000000000000000110 //CMP R8 ,R6
00010000100000010001000000000001 //ADDNE R1 ,R1,R1 //R1 = 8192
11100001000110010000000000001000 //TST R9 ,R8
00000000100000100010000000000010 //ADDEQ R2 ,R2,R2 //R2 = -1073741824
11100011101000001100101100000001 //MOV R12 ,#1024 //R12 = 1024
11100100100011000001000000000000 //STR R1 ,[R12],#0 //MEM[1024] = 8192
11100100100111001011000000000000 //LDR R11,[R12],#0 //R11 = 8192
11100100100011000010000000000100 //STR R2 ,[R12],#4 //MEM[1028] = -1073741824
11100100100011000011000000001000 //STR R3 ,[R12],#8 //MEM[1032] = -2147483648
11100100100011000100000000001101 //STR R4 ,[R12],#13 //MEM[1036] = 41
11100100100011000101000000010000 //STR R5 ,[R12],#16 //MEM[1040] = -123
11100100100011000110000000010100 //STR R6 ,[R12],#20 //MEM[1044] = 9
11100100100111001010000000000100 //LDR R10,[R12],#4 //R10 = -1073741824
11100100100011000111000000011000 //STR R7 ,[R12],#24 //MEM[1048] = -123
11100011101000000001000000000100 //MOV R1 ,#4 //R1 = 4
11100011101000000010000000000000 //MOV R2 ,#0 //R2 = 0
11100011101000000011000000000000 //MOV R3 ,#0 //R3 = 0
11100000100011000100000100000011 //ADD R4 ,R12,R3,LSL #2 R4 = 1024 / 1028 / 1032
11100100100101000101000000000000 //LDR R5 ,[R4],#0 // R5 = 8192 / 8192 / -2147483648
11100100100101000110000000000100 //LDR R6 ,[R4],#4 // R6 = -1073741824 / -2147483648 / 41
11100001010101010000000000000110 //CMP R5 ,R6
11000100100001000110000000000000 //STRGT R6 ,[R4],#0 // MEM[1024] = -1073741824 / MEM[1028] = -2147483648 /  MEM[1032] = 41
11000100100001000101000000000100 //STRGT R5 ,[R4],#4 // MEM[1028] = 8192 / MEM[1032] = 8192 / MEM[1036] = 8192
11100010100000110011000000000001 //ADD R3 ,R3,#1 // R3 = 0 / 1 / 2
11100011010100110000000000000011 //CMP R3 ,#3
10111010111111111111111111110111 //BLT #-9
11100010100000100010000000000001 //ADD R2 ,R2,#1
11100001010100100000000000000001 //CMP R2 ,R1
10111010111111111111111111110011 //BLT #-13
11100100100111000001000000000000 //LDR R1 ,[R0],#0 //R1 = -2147483648
11100100100111000010000000000100 //LDR R2 ,[R0],#4 //R2 = -1073741824
11100100100111000011000000001000 //STR R3 ,[R0],#8 //R3 = 41
11100100100111000100000000001100 //STR R4 ,[R0],#12 //R4 = 8192
11100100100111000101000000010000 //STR R5 ,[R0],#16
11100100100111000110000000010100 //STR R6 ,[R0],#20
11101010111111111111111111111111 //B #-1


// 3 no hazard:
//   read after write:
//      tozih: neveshtan dar register, dar stage e WB rokh mide, va khoondan azash too 2 stage e ghabl
//      detection: biaim dst e stage EXE ro(be shart e inke WBEN e stage e exe 1 bashe) ba 2 ta src e too stage e ID check konim, agar dst ba src2(khorooji e mux)(src2 hamishe RM e bejoz dar store) ya Rn(src1) barabar bood, dastoor ie ke too ID bood ro negah darim
//                 sar e stage e memory ham mitoone rokh bede(or hast na and)(oon or i ke too id hast, vaase ine ke agar imm dashtim ya dastoor load bood(tak src bood), fgt ba src1 check konim)
//      fix: hazard ro 1 konim, IF2EXEreg, ID2EXEreg freeze shan, be pc bere, va 0 kardan e tamam e controll signal ha
//    write after read:
//    chon pardazande out of order nis, pas moshkeli ijad nemikone

//  ID az register file bekhoone, va WB ham write kone(hazard e sakhtari)
//  fix: ke write register file dar negedge bashe

//  chon too exe branch taken maloom mishe, bayad 2 dastoor e vared shode ro flush konim



//ahan
